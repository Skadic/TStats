//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::OsuMode;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "tournament"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub name: String,
    pub shorthand: String,
    pub format: i16,
    pub bws: bool,
    pub mode: OsuMode,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    Shorthand,
    Format,
    Bws,
    Mode,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    CountryRestriction,
    RankRestriction,
    Stage,
    Team,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Name => ColumnType::String(Some(30u32)).def().unique(),
            Self::Shorthand => ColumnType::String(Some(8u32)).def(),
            Self::Format => ColumnType::SmallInteger.def(),
            Self::Bws => ColumnType::Boolean.def(),
            Self::Mode => OsuMode::db_type().def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::CountryRestriction => Entity::has_many(super::country_restriction::Entity).into(),
            Self::RankRestriction => Entity::has_many(super::rank_restriction::Entity).into(),
            Self::Stage => Entity::has_many(super::stage::Entity).into(),
            Self::Team => Entity::has_many(super::team::Entity).into(),
        }
    }
}

impl Related<super::country_restriction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CountryRestriction.def()
    }
}

impl Related<super::rank_restriction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RankRestriction.def()
    }
}

impl Related<super::stage::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stage.def()
    }
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Team.def()
    }
}

impl Related<super::pool_bracket::Entity> for Entity {
    fn to() -> RelationDef {
        super::stage::Relation::PoolBracket.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::stage::Relation::Tournament.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
