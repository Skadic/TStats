//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "pool_bracket")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub tournament_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub stage_order: i16,
    #[sea_orm(primary_key, auto_increment = false)]
    pub bracket_order: i16,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::pool_map::Entity")]
    PoolMap,
    #[sea_orm(
        belongs_to = "super::stage::Entity",
        from = "(Column::TournamentId, Column::StageOrder)",
        to = "(super::stage::Column::TournamentId, super::stage::Column::StageOrder)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Stage,
}

impl Related<super::pool_map::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PoolMap.def()
    }
}

impl Related<super::stage::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stage.def()
    }
}

impl Related<super::tournament::Entity> for Entity {
    fn to() -> RelationDef {
        super::stage::Relation::Tournament.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::stage::Relation::PoolBracket.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
