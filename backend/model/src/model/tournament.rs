//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::OsuMode;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tournament")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub shorthand: String,
    pub format: i16,
    pub bws: bool,
    pub mode: OsuMode,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::country_restriction::Entity")]
    CountryRestriction,
    #[sea_orm(has_many = "super::rank_restriction::Entity")]
    RankRestriction,
    #[sea_orm(has_many = "super::stage::Entity")]
    Stage,
    #[sea_orm(has_many = "super::team::Entity")]
    Team,
}

impl Related<super::country_restriction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CountryRestriction.def()
    }
}

impl Related<super::rank_restriction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RankRestriction.def()
    }
}

impl Related<super::stage::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stage.def()
    }
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Team.def()
    }
}

impl Related<super::pool_bracket::Entity> for Entity {
    fn to() -> RelationDef {
        super::stage::Relation::PoolBracket.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::stage::Relation::Tournament.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
