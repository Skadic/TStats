openapi: 3.0.3
info:
  title: server
  description: ''
  license:
    name: ''
  version: 0.1.0
paths:
  /api/beatmap:
    get:
      tags:
      - routes::debug
      summary: Requests a test beatmap from the osu api.
      description: Requests a test beatmap from the osu api.
      operationId: get_beatmap
      responses:
        '200':
          description: Successfuly requested beatmap
  /api/stage:
    get:
      tags:
      - routes::stage
      summary: Get a stage together with its pool brackets and their maps
      description: Get a stage together with its pool brackets and their maps
      operationId: get_stage
      parameters:
      - name: tournament_id
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: stage_order
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Return the given stage with extra data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedStageResult'
        '404':
          description: The tournament or stage does not exist
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Error communicating with the database
          content:
            text/plain:
              schema:
                type: string
    post:
      tags:
      - routes::stage
      summary: Creates a new stage in a tournament
      description: Creates a new stage in a tournament
      operationId: create_stage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stage'
        required: true
      responses:
        '201':
          description: Stage Created
        '500':
          description: Error communicating with the database
          content:
            text/plain:
              schema:
                type: string
  /api/stage/all:
    get:
      tags:
      - routes::stage
      summary: Get all stages for a given tournament
      description: Get all stages for a given tournament
      operationId: get_all_stages
      parameters:
      - name: tournament_id
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Return all stages for the given tournament
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stage'
        '404':
          description: The tournament does not exist
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Error communicating with the database
          content:
            text/plain:
              schema:
                type: string
  /api/test_data:
    post:
      tags:
      - routes::debug
      summary: Fills the database with test data including a tournament, a few stages, maps for its pools.
      description: Fills the database with test data including a tournament, a few stages, maps for its pools.
      operationId: fill_test_data
      responses:
        '201':
          description: Successfully created a test tournament
  /api/tournament:
    get:
      tags:
      - routes::tournament
      summary: Get a tournament by its ID including its stages
      description: Get a tournament by its ID including its stages
      operationId: get_tournament
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Successfuly requested beatmap
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedTournamentResult'
        '404':
          description: The tournament with the given id does not exist
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Failed requesting from the database
          content:
            text/plain:
              schema:
                type: string
    post:
      tags:
      - routes::tournament
      summary: Create a new tournament
      description: Create a new tournament
      operationId: create_tournament
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        '201':
          description: Successfully created tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Id'
              example:
                id: 16
        '500':
          description: Failed to create tournament
          content:
            text/plain:
              schema:
                type: string
  /api/tournament/all:
    get:
      tags:
      - routes::tournament
      summary: Get all tournaments from the database
      description: Get all tournaments from the database
      operationId: get_all_tournaments
      responses:
        '200':
          description: Successfuly requested beatmap
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
        '500':
          description: Failed requesting tournaments from the database
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    CountryRestriction:
      type: object
      description: A country which is allowed in a tournament
      required:
      - tournamentId
      - name
      properties:
        name:
          type: string
          description: The country's ISO3166-1 alpha-2 code
          example: JP
        tournamentId:
          type: integer
          format: int32
          description: The id of the tournament the
          example: 634
    ExtendedPoolBracket:
      type: object
      description: A pool bracket consisting of a name and its associated maps
      required:
      - name
      - maps
      properties:
        maps:
          type: array
          items:
            type: integer
            minimum: 0
          description: The map ids of the maps that make up this pool bracket
          example:
          - 131891
          - 126645
          - 3853099
        name:
          type: string
          description: The name of the pool bracket
          example: HR
    ExtendedStageResult:
      allOf:
      - $ref: '#/components/schemas/Stage'
      - type: object
        required:
        - brackets
        properties:
          brackets:
            type: array
            items:
              $ref: '#/components/schemas/ExtendedPoolBracket'
            description: The pool brackets with their maps
      description: A stage with its associated pool brackets and their maps
    ExtendedTournamentResult:
      allOf:
      - $ref: '#/components/schemas/Tournament'
      - type: object
        required:
        - stages
        - countryRestrictions
        properties:
          countryRestrictions:
            type: array
            items:
              type: string
            description: The tournament's country restrictions as a vector of country codes.
            example:
            - UK
            - NZ
            - FR
          stages:
            type: array
            items:
              $ref: '#/components/schemas/SlimStage'
            description: The tournament's stages
            example:
            - best_of: 5
              name: RO16
            - best_of: 7
              name: QF
      description: A tournament including all its stages and country restrictions
    Id:
      type: object
      description: A struct containing a simple numeric id, used among other things to query for a specific entity by its id.
      required:
      - id
      properties:
        id:
          type: integer
          format: int32
    PoolBracket:
      type: object
      description: A bracket in a tournament pool, like "the NoMod bracket", "the Hidden bracket", etc.
      required:
      - tournamentId
      - stageOrder
      - bracketOrder
      - name
      properties:
        bracketOrder:
          type: integer
          format: int32
          description: The order of this bracket in the stage. E.g. if this is the first bracket in the pool, this is 0.
          example: 3
        name:
          type: string
          description: The name for this bracket, like "NM", "HD", etc.
          example: DT
        stageOrder:
          type: integer
          format: int32
          description: The index of the stage in the tournament this pool belongs to.
          example: 1
        tournamentId:
          type: integer
          format: int32
          description: The id of the tournament this pool belongs to
          example: 161
    PoolMap:
      type: object
      description: A map in a tournament pool.
      required:
      - tournamentId
      - stageOrder
      - bracketOrder
      - mapOrder
      - mapId
      properties:
        bracketOrder:
          type: integer
          format: int32
          description: The order of this bracket in the stage. E.g. if this is the first bracket in the pool, this is 0.
          example: 1
        mapId:
          type: integer
          format: int64
          description: The map's osu id. Note, that this is *not* the mapset id.
          example: 1009363
        mapOrder:
          type: integer
          format: int32
          description: The number of the map in the bracket. Note, that this is *zero indexed*, so e.g. NM1 will have map_order 0, NM2 will have map_order 1, etc.
          example: 3
        stageOrder:
          type: integer
          format: int32
          description: The index of the stage in the tournament this pool belongs to.
          example: 2
        tournamentId:
          type: integer
          format: int32
          description: The id of the tournament this pool belongs to.
          example: 435
    RankRange:
      type: object
      description: A rank range with a lower and upper bound.
      required:
      - min
      - max
      properties:
        max:
          type: integer
          description: The rank range's upper bound
          minimum: 0
        min:
          type: integer
          description: The rank range's lower bound
          minimum: 0
      example:
        max: 10000
        min: 500
    RankRestriction:
      oneOf:
      - type: string
        description: Everyone can participate. There is no rank restriction
        enum:
        - OpenRank
      - type: object
        required:
        - Single
        properties:
          Single:
            $ref: '#/components/schemas/RankRange'
      - type: object
        required:
        - Tiered
        properties:
          Tiered:
            type: array
            items:
              $ref: '#/components/schemas/RankRange'
            description: This tournament has multiple tiers and therefore multiple rank ranges
      description: |-
        A rank range for the current tournament which determines which players are allowed into the
        tournament
      example:
        Single:
          max: 10000
          min: 500
    SlimStage:
      type: object
      description: A stage with all primary key information stripped out
      required:
      - name
      - bestOf
      properties:
        bestOf:
          type: integer
          format: int32
        name:
          type: string
      example:
        best_of: 7
        name: QF
    Stage:
      type: object
      description: A stage in a tournament.
      required:
      - tournamentId
      - name
      - stageOrder
      - bestOf
      properties:
        bestOf:
          type: integer
          format: int32
          description: The best-of of this stage's matches.
          example: 7
        name:
          type: string
          description: The stage's short name. For example, "QF", "RO16", etc.
          example: RO16
        stageOrder:
          type: integer
          format: int32
          description: The stage's order in the tournament. For example, the first stage is 0, the second stage is 1, etc.
          example: 2
        tournamentId:
          type: integer
          format: int32
          description: The id of the tournament the stage belongs to.
          example: 614
    Tournament:
      type: object
      description: A tournament with its associated data.
      required:
      - name
      - shorthand
      - format
      - rankRange
      - bws
      properties:
        bws:
          type: boolean
          description: Whether this tournament uses badge-weighting to adjust player's ranks.
          example: true
        format:
          $ref: '#/components/schemas/TournamentFormat'
        name:
          type: string
          description: The tournament's full name
          example: My Great Tournament 3
        rankRange:
          $ref: '#/components/schemas/RankRestriction'
        shorthand:
          type: string
          description: This tournament's shorthand name
          example: MGT3
    TournamentFormat:
      oneOf:
      - type: object
        required:
        - Versus
        properties:
          Versus:
            type: integer
            description: |-
              A simple versus match. The parameter is the number of players playing for each team at any
              one time. So for a 4v4, this parameter is 4.
            minimum: 0
        example: 1
      - type: object
        required:
        - BattleRoyale
        properties:
          BattleRoyale:
            type: integer
            description: A battle royale style tournament, the parameter being the number of players.
            minimum: 0
        example: 10
      description: The tournament format, detailing the format of a match.
      example:
        Versus: 3
    TournamentId:
      type: object
      description: A struct containing a tournament id used for querying
      required:
      - tournament_id
      properties:
        tournament_id:
          type: integer
          format: int32
      example:
        tournament_id: 152
    TournamentIdAndStageOrder:
      type: object
      description: A struct containing a tournament id and stage order used for querying
      required:
      - tournament_id
      - stage_order
      properties:
        stage_order:
          type: integer
          format: int32
        tournament_id:
          type: integer
          format: int32
      example:
        stage_order: 2
        tournament_id: 152
tags:
- name: tstats
  description: Backend API for managing tournaments and the associated data
